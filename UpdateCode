    def create_connections(self):
        """Connect sliders and line edits to Maya attributes."""
        float_min, float_max = 0.0, 10.0

        for slider_name, control_attr in self.slider_control_map.items():
            slider = getattr(self.ui, slider_name, None)
            line_edit_name = slider_name.replace("slider", "lineEdit")
            line_edit = getattr(self.ui, line_edit_name, None)

            if not slider or not line_edit:
                logging.warning(f"Slider or LineEdit not found for {slider_name}")
                continue

            try:
                value = cmds.getAttr(control_attr)
                slider_value = int((value - float_min) / (float_max - float_min) * 100)
                slider.setValue(slider_value)
                line_edit.setText(f"{value:.2f}")

                slider.valueChanged.connect(
                    lambda v, attr=control_attr, le=line_edit: self.update_attribute_and_line_edit(v, attr, le, float_min, float_max)
                )
                line_edit.editingFinished.connect(
                    lambda le=line_edit, sl=slider, attr=control_attr: self.update_attribute_and_slider(le, sl, attr, float_min, float_max)
                )
            except RuntimeError as e:
                logging.warning(f"Error connecting {slider_name}: {e}")

    def create_callbacks(self):
        """Create Maya callbacks to monitor attribute changes."""
        for slider_name, control_attr in self.slider_control_map.items():
            try:
                node, attr = control_attr.split('.', 1)
                callback_id = om.MNodeMessage.addAttributeChangedCallback(
                    self.get_mobject(node),
                    lambda msg, plug, otherPlug, attr=control_attr: self.on_attribute_changed(msg, plug, attr)
                )
                self.callback_id_map[control_attr] = callback_id
            except Exception as e:
                logging.error(f"Failed to create callback for {control_attr}: {e}")

    def get_mobject(self, node_name):
        """Get the MObject for a Maya node."""
        sel_list = om.MSelectionList()
        sel_list.add(node_name)
        mobject = om.MObject()
        sel_list.getDependNode(0, mobject)
        return mobject

    def on_attribute_changed(self, msg, plug, control_attr):
        """Callback triggered when a Maya attribute is changed."""
        if msg & om.MNodeMessage.kAttributeSet:
            try:
                attr_name = f"{plug.node().name()}.{plug.partialName()}"
                value = cmds.getAttr(attr_name)

                for slider_name, mapped_attr in self.slider_control_map.items():
                    if mapped_attr == attr_name:
                        slider = getattr(self.ui, slider_name, None)
                        line_edit_name = slider_name.replace("slider", "lineEdit")
                        line_edit = getattr(self.ui, line_edit_name, None)

                        if slider and line_edit:
                            float_min, float_max = 0.0, 10.0
                            slider_value = int((value - float_min) / (float_max - float_min) * 100)
                            slider.setValue(slider_value)
                            line_edit.setText(f"{value:.2f}")
            except Exception as e:
                logging.error(f"Error handling attribute change for {control_attr}: {e}")

    def update_attribute_and_line_edit(self, slider_value, control_attr, line_edit, float_min, float_max):
        """Update the Maya attribute and line edit based on the slider value."""
        float_value = float_min + slider_value * (float_max - float_min) / 100
        cmds.setAttr(control_attr, float_value)
        line_edit.setText(f"{float_value:.2f}")

    def update_attribute_and_slider(self, line_edit, slider, control_attr, float_min, float_max):
        """Update the Maya attribute and slider based on the line edit value."""
        float_value = float(line_edit.text())
        slider_value = int((float_value - float_min) / (float_max - float_min) * 100)
        cmds.setAttr(control_attr, float_value)
        slider.setValue(slider_value)

    def on_exit_code(self):
        """Cleanup when the UI is closed."""
        self.remove_callbacks()
        self.deleteLater()

    def remove_callbacks(self):
        """Remove all Maya callbacks."""
        for attr, callback_id in self.callback_id_map.items():
            try:
                om.MMessage.removeCallback(callback_id)
            except Exception as e:
                logging.error(f"Error removing callback for {attr}: {e}")

def show_window():
    """Show the window."""
    global my_window
    if 'my_window' in globals() and my_window is not None:
        try:
            my_window.close()
            my_window.deleteLater()
        except Exception as e:
            logging.error(f"Error closing existing window: {e}")

    my_window = MyWindow(parent=get_maya_window())
    my_window.show()
