from PySide2 import QtWidgets
from shiboken2 import wrapInstance
import maya.OpenMayaUI as omui
import maya.cmds as cmds

def get_maya_main_window():
    """
    Get Maya's main window as a PySide2 widget.
    """
    main_window_ptr = omui.MQtUtil.mainWindow()
    return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)

class MyMayaWindow(QtWidgets.QDialog):
    def __init__(self, parent=get_maya_main_window()):
        super(MyMayaWindow, self).__init__(parent)

        self.setWindowTitle("Fully Synced Slider with connectControl")
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)
        self.setMinimumSize(300, 150)

        # Variables
        self.sphere_name = None
        self.slider_name = "sphere_scale_slider"

        # Layout
        self.layout = QtWidgets.QVBoxLayout(self)

        # Label to display the slider value
        self.slider_label = QtWidgets.QLabel("Slider Value: 1.0")
        self.layout.addWidget(self.slider_label)

        # Add Maya's native slider using cmds.floatSliderGrp
        self.slider_widget = cmds.floatSliderGrp(
            self.slider_name,
            label="Sphere Scale",
            minValue=0.1,
            maxValue=10.0,
            field=True,  # Allows numeric input in addition to the slider
            value=1.0
        )
        # Embed the slider into PySide2
        slider_container = omui.MQtUtil.findControl(self.slider_name)
        slider_widget = wrapInstance(int(slider_container), QtWidgets.QWidget)
        self.layout.addWidget(slider_widget)

        # Buttons
        self.create_sphere_button = QtWidgets.QPushButton("Create Sphere")
        self.layout.addWidget(self.create_sphere_button)

        # Button connection
        self.create_sphere_button.clicked.connect(self.create_sphere)

    def create_sphere(self):
        """
        Create a sphere and connect its scale to the Maya slider using connectControl.
        """
        # Delete the existing sphere if it exists
        if self.sphere_name:
            cmds.delete(self.sphere_name)

        # Create a new sphere
        self.sphere_name = cmds.polySphere(name="SliderSphere")[0]

        # Use connectControl to link the slider to the sphere's primary scale attribute (scaleX)
        cmds.connectControl(self.slider_name, f"{self.sphere_name}.scaleX")

        # Create a utility expression to sync scaleY and scaleZ with scaleX
        cmds.expression(s=f"{self.sphere_name}.scaleY = {self.sphere_name}.scaleX; {self.sphere_name}.scaleZ = {self.sphere_name}.scaleX;", object=self.sphere_name, alwaysEvaluate=True)

        # Update the label with the current slider value
        slider_value = cmds.floatSliderGrp(self.slider_name, query=True, value=True)
        self.slider_label.setText(f"Slider Value: {slider_value:.1f}")
